apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'org.greenrobot.greendao' // apply plugin
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.moonlight.flyvideo"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 191213
        versionName "1.0.5"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true //支持分包
        resConfigs "zh", "en"// 这样我们编译出的apk中，只有 “默认” 、 “中文zh” 和 “英文en” 两种资源
        vectorDrawables.useSupportLibrary true//支持矢量图
        multiDexKeepProguard file("tinkerMultidexKeep.pro")
        resValue('string', 'age', '12year')// 添加至 res/value，通过 R.string.age 获取
        //keep specific classes using proguard syntax
        ndk {
            //选择要添加的对应 cpu 类型的 .so 库。
            abiFilters 'armeabi-v7a'
//            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
    }
    signingConfigs {
        release {
            keyAlias 'fly'
            keyPassword 'fly123'
            storePassword 'fly123'
            storeFile file('../keystore/fly.jks')
        }
        debug {
            keyAlias 'fly'
            keyPassword 'fly123'
            storePassword 'fly123'
            storeFile file('../keystore/fly.jks')
        }
    }

    flavorDimensions('mode', 'size')
    productFlavors {
        happy {
            // applicationId 应用的包名，会覆盖 defaultConfig 中的 applicationId
            // applicationId 会替换 AndroidManifest.xml 中的 manifest 标签下 package 的 value
            applicationId "com.moonlight.flyvideo"
            dimension "mode"
            resValue "string", "app_name", "Happy"
            resValue "string", "app_welcome", "欢迎来到Happy"
            resValue "string", "company_name", "Happy"
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [
                    //此方式可直接在 manifest 中通过 ${icon} 进行占位引用； 或者在main同级中创建不同渠道后创建 res 资源文件
                    icon        : "@mipmap/icon_comment_glod",
                    launcherIcon: "@mipmap/icon_comment_glod"

            ]

        }
        sad {
            applicationId "com.moonlight.flyvideo"
            dimension "mode"
            resValue "string", "app_name", "Sad"
            resValue "string", "app_welcome", "欢迎来到Sad"
            resValue "string", "company_name", "Sad"
            manifestPlaceholders = [

                    //此方式可直接在 manifest 中通过 ${icon} 进行占位引用； 或者在main同级中创建不同渠道后创建 res 资源文件
                    icon        : "@drawable/lakers_test",
                    launcherIcon: "@drawable/lakers_test"

            ]
        }
        bigsize {
            dimension "size"
            resValue "string", "app_name", "bigsize"
            resValue "string", "app_welcome", "欢迎来到bigsize"
            resValue "string", "company_name", "bigsize"
            // 修改 AndroidManifest.xml 里渠道变量
            manifestPlaceholders = [
                    //此方式可直接在 manifest 中通过 ${icon} 进行占位引用； 或者在main同级中创建不同渠道后创建 res 资源文件
                    icon        : "@mipmap/icon_comment_glod",
                    launcherIcon: "@mipmap/icon_comment_glod"

            ]

        }
        smallsize {
            dimension "size"
            resValue "string", "app_name", "smallsize"
            resValue "string", "app_welcome", "欢迎来到smallsize"
            resValue "string", "company_name", "smallsize"
            manifestPlaceholders = [

                    //此方式可直接在 manifest 中通过 ${icon} 进行占位引用； 或者在main同级中创建不同渠道后创建 res 资源文件
                    icon        : "@drawable/lakers_test",
                    launcherIcon: "@drawable/lakers_test"

            ]
        }
    }
    buildTypes {
        // 发布类型
        release {
            // 若此时 applicationId 为 com.zinc.gradlestudy，则最终会形成 com.zinc.gradlestudy.debug 的包名
            applicationIdSuffix ""
            signingConfig signingConfigs.release
            minifyEnabled false
            buildConfigField "boolean", "LOG_DEBUG", "false"// 不显示Log
            zipAlignEnabled false//会对应用程序进行字节对齐，对齐后会减少了运行应用程序时消耗的内存。
//            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardRules.pro'
            manifestPlaceholders = [
                    APP_LOGO_ICON        : "@mipmap/icon_comment_glod",
                    APP_IS_TEST_VALUE    : false,
                    HOST_URL_VALUE       : "http://tapi.nucarf.cn/V1/",
                    WECHAT_HOST_URL_VALUE: "https://wechat.nucarf.com",
                    JPUSH_PKGNAME        : "com.moonlight.flyvideo",
                    JPUSH_APPKEY         : "f43d0d154bd1093cd75ac513", //JPush 上注册的包名对应的 Appkey.
                    JPUSH_CHANNEL        : "developer-default", //暂时填写默认值即可.
            ]
        }
        // 测试类型，给测试人员
        debug {
            // 若此时 applicationId 为 com.zinc.gradlestudy，则最终会形成 com.zinc.gradlestudy.debug 的包名
//            applicationIdSuffix ".debug"//applicationId 添加后缀
            applicationIdSuffix ""//applicationId 添加后缀
            signingConfig signingConfigs.debug
            debuggable true
            minifyEnabled false//开启混淆
//            versionNameSuffix "_debug"//这里是给versionName添加后缀
            versionNameSuffix ""//这里是给versionName添加后缀
            zipAlignEnabled true  //会对应用程序进行字节对齐，对齐后会减少了运行应用程序时消耗的内存。
//            shrinkResources false // 移除无用的resource文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardRules.pro'
            //在 BuildConfig 类中添加值 可以通过 BuildConfig 进行获取
            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示Log
            buildConfigField('String', 'name', '"ywm"')
            buildConfigField('int', 'age', '27')
            // 添加至 res/value，通过 R.string.age 获取
            resValue('string', 'age', '12 years old')
            manifestPlaceholders = [
                    APP_LOGO_ICON        : "@drawable/lakers_test",
                    APP_IS_TEST_VALUE    : true,
                    HOST_URL_VALUE       : "http://2019_0418_invoice_new.api.yidian.nucarf.cn/V1/",
                    WECHAT_HOST_URL_VALUE: "http://twechat.nucarf.cn",
                    JPUSH_PKGNAME        : "com.moonlight.flyvideo",
                    JPUSH_APPKEY         : "f43d0d154bd1093cd75ac513", //JPush 上注册的包名对应的 Appkey.
                    JPUSH_CHANNEL        : "developer-default", //暂时填写默认值即可.
            ]
        }
        // 本地类型，和后端联调使用
//        local {
//            // 会拷贝 debug 的配置
//            initWith debug {
//                // 在这里进行我们自己的配置
//                matchingFallbacks = ['debug', 'release']
//                applicationIdSuffix ".local"//applicationId 添加后缀
//
//            }
//            minifyEnabled false//开启混淆
//            buildConfigField "boolean", "LOG_DEBUG", "true"// 显示Log
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardRules.pro'
//        }
    }


    dexOptions {
        preDexLibraries false
        // 支持大工程模式
        jumboMode true
        javaMaxHeapSize "4g"
    }
    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }

    packagingOptions {
        //出现这个问题是因为butterknife 与gradle 同时引用了annotation。
        exclude 'META-INF/services/javax.annotation.processing.Processor'

        exclude '*.apk'
        exclude 'META-INF/rxjava.properties'
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                outputFileName = defaultConfig.applicationId.subSequence(defaultConfig.applicationId.lastIndexOf(".") + 1, defaultConfig.applicationId.length()) + "-v" + defaultConfig.versionName + "-" + releaseTime() + "-" + output.baseName + ".apk"
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

def releaseTime() {
    return new Date().format("yyyyMMddHH", TimeZone.getTimeZone("UTC"))
}


repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}
greendao {
    schemaVersion 2 //数据库版本号
    daoPackage 'com.example.myapp.database.greenDao.db'
// 设置DaoMaster、DaoSession、Dao 包名
    targetGenDir 'src/main/java'//设置DaoMaster、DaoSession、Dao目录
    generateTests false //设置为true以自动生成单元测试。
    targetGenDirTests 'src/main/java' //应存储生成的单元测试的基本目录。默认为 src / androidTest / java。
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    //数据库
    implementation 'org.greenrobot:greendao:3.2.2'
    //黄油刀
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.0.0'
    //内存泄漏监测
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    //弹框显示
    implementation 'com.afollestad.material-dialogs:core:3.1.1'
    implementation 'com.afollestad.material-dialogs:input:3.1.1'
    //极光 此处以JPush 3.8.6 版本为例。
    implementation 'cn.jiguang.sdk:jpush:3.8.6'
    // 此处以JCore 2.5.5 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.5.5'
    implementation project(':base')

    api 'com.google.android.material:material:1.2.1'
    //dagger2
    annotationProcessor 'com.google.dagger:dagger-compiler:2.21'
    implementation 'com.google.dagger:dagger-android:2.21'
    implementation 'com.google.dagger:dagger:2.21'
//    implementation 'com.google.dagger:dagger-android-support:2.21'
//    annotationProcessor 'com.google.dagger:dagger-android-processor:2.21'
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    //热修改
    //tinker的核心库
    //    implementation("com.tencent.tinker:tinker-android-lib:1.9.1") { changing = true }
    //可选，用于生成application类
    //    annotationProcessor("com.tencent.tinker:tinker-android-anno:1.9.1") { changing = true }
    //    compileOnly("com.tencent.tinker:tinker-android-anno:1.9.1") { changing = true }
    //若使用annotation需要单独引用,对于tinker的其他库都无需再引用
    annotationProcessor("com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}") {
        changing = true
    }
    compileOnly("com.tinkerpatch.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    implementation("com.tinkerpatch.sdk:tinkerpatch-android-sdk:${TINKERPATCH_VERSION}") {
        changing = true
    }
    //防抖动
    implementation 'com.github.liys666666:DoubleClick:V1.0.4'
    // // 启动器
    implementation 'com.github.hufeiyang:LaunchStarter:0.0.1'
    implementation project(path: ':apicloudlib')
    implementation project(path: ':exoplayerlibrary')
    implementation "androidx.core:core-ktx:+"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation project(path: ':flutter')
}

apply from: 'tinkerpatch.gradle'
